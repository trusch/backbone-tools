// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Job struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Queue                string               `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Spec                 []byte               `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	State                []byte               `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Labels               map[string]string    `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FinishedAt           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{0}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *Job) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Job) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Job) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Job) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Job) GetStartedAt() *timestamp.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Job) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Job) GetFinishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

type CronJob struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Queue                string               `protobuf:"bytes,3,opt,name=queue,proto3" json:"queue,omitempty"`
	Spec                 []byte               `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Cron                 string               `protobuf:"bytes,5,opt,name=cron,proto3" json:"cron,omitempty"`
	Labels               map[string]string    `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	NextRunAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=next_run_at,json=nextRunAt,proto3" json:"next_run_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CronJob) Reset()         { *m = CronJob{} }
func (m *CronJob) String() string { return proto.CompactTextString(m) }
func (*CronJob) ProtoMessage()    {}
func (*CronJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{1}
}

func (m *CronJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronJob.Unmarshal(m, b)
}
func (m *CronJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronJob.Marshal(b, m, deterministic)
}
func (m *CronJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJob.Merge(m, src)
}
func (m *CronJob) XXX_Size() int {
	return xxx_messageInfo_CronJob.Size(m)
}
func (m *CronJob) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJob.DiscardUnknown(m)
}

var xxx_messageInfo_CronJob proto.InternalMessageInfo

func (m *CronJob) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CronJob) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CronJob) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *CronJob) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CronJob) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

func (m *CronJob) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CronJob) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *CronJob) GetNextRunAt() *timestamp.Timestamp {
	if m != nil {
		return m.NextRunAt
	}
	return nil
}

type CreateJobRequest struct {
	Queue                string            `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Spec                 []byte            `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateJobRequest) Reset()         { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()    {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{2}
}

func (m *CreateJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJobRequest.Unmarshal(m, b)
}
func (m *CreateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJobRequest.Marshal(b, m, deterministic)
}
func (m *CreateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobRequest.Merge(m, src)
}
func (m *CreateJobRequest) XXX_Size() int {
	return xxx_messageInfo_CreateJobRequest.Size(m)
}
func (m *CreateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobRequest proto.InternalMessageInfo

func (m *CreateJobRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *CreateJobRequest) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateJobRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ListenRequest struct {
	Queue                string   `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenRequest) Reset()         { *m = ListenRequest{} }
func (m *ListenRequest) String() string { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()    {}
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{3}
}

func (m *ListenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenRequest.Unmarshal(m, b)
}
func (m *ListenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenRequest.Marshal(b, m, deterministic)
}
func (m *ListenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenRequest.Merge(m, src)
}
func (m *ListenRequest) XXX_Size() int {
	return xxx_messageInfo_ListenRequest.Size(m)
}
func (m *ListenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenRequest proto.InternalMessageInfo

func (m *ListenRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type HeartbeatRequest struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	State                []byte   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Finished             bool     `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{4}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *HeartbeatRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *HeartbeatRequest) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

type GetRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{5}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{6}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRequest struct {
	Queues               []string          `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExcludeFinished      bool              `protobuf:"varint,3,opt,name=exclude_finished,json=excludeFinished,proto3" json:"exclude_finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{7}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetQueues() []string {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *ListRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ListRequest) GetExcludeFinished() bool {
	if m != nil {
		return m.ExcludeFinished
	}
	return false
}

type CreateCronJobRequest struct {
	Queue                string            `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spec                 []byte            `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Cron                 string            `protobuf:"bytes,5,opt,name=cron,proto3" json:"cron,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateCronJobRequest) Reset()         { *m = CreateCronJobRequest{} }
func (m *CreateCronJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCronJobRequest) ProtoMessage()    {}
func (*CreateCronJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{8}
}

func (m *CreateCronJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCronJobRequest.Unmarshal(m, b)
}
func (m *CreateCronJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCronJobRequest.Marshal(b, m, deterministic)
}
func (m *CreateCronJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCronJobRequest.Merge(m, src)
}
func (m *CreateCronJobRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCronJobRequest.Size(m)
}
func (m *CreateCronJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCronJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCronJobRequest proto.InternalMessageInfo

func (m *CreateCronJobRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *CreateCronJobRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCronJobRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateCronJobRequest) GetSpec() []byte {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateCronJobRequest) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

type AquireRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AquireRequest) Reset()         { *m = AquireRequest{} }
func (m *AquireRequest) String() string { return proto.CompactTextString(m) }
func (*AquireRequest) ProtoMessage()    {}
func (*AquireRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{9}
}

func (m *AquireRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AquireRequest.Unmarshal(m, b)
}
func (m *AquireRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AquireRequest.Marshal(b, m, deterministic)
}
func (m *AquireRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AquireRequest.Merge(m, src)
}
func (m *AquireRequest) XXX_Size() int {
	return xxx_messageInfo_AquireRequest.Size(m)
}
func (m *AquireRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AquireRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AquireRequest proto.InternalMessageInfo

func (m *AquireRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AquireResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AquireResponse) Reset()         { *m = AquireResponse{} }
func (m *AquireResponse) String() string { return proto.CompactTextString(m) }
func (*AquireResponse) ProtoMessage()    {}
func (*AquireResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{10}
}

func (m *AquireResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AquireResponse.Unmarshal(m, b)
}
func (m *AquireResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AquireResponse.Marshal(b, m, deterministic)
}
func (m *AquireResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AquireResponse.Merge(m, src)
}
func (m *AquireResponse) XXX_Size() int {
	return xxx_messageInfo_AquireResponse.Size(m)
}
func (m *AquireResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AquireResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AquireResponse proto.InternalMessageInfo

func (m *AquireResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type HoldRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HoldRequest) Reset()         { *m = HoldRequest{} }
func (m *HoldRequest) String() string { return proto.CompactTextString(m) }
func (*HoldRequest) ProtoMessage()    {}
func (*HoldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{11}
}

func (m *HoldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HoldRequest.Unmarshal(m, b)
}
func (m *HoldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HoldRequest.Marshal(b, m, deterministic)
}
func (m *HoldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldRequest.Merge(m, src)
}
func (m *HoldRequest) XXX_Size() int {
	return xxx_messageInfo_HoldRequest.Size(m)
}
func (m *HoldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HoldRequest proto.InternalMessageInfo

func (m *HoldRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type HoldResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HoldResponse) Reset()         { *m = HoldResponse{} }
func (m *HoldResponse) String() string { return proto.CompactTextString(m) }
func (*HoldResponse) ProtoMessage()    {}
func (*HoldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{12}
}

func (m *HoldResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HoldResponse.Unmarshal(m, b)
}
func (m *HoldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HoldResponse.Marshal(b, m, deterministic)
}
func (m *HoldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldResponse.Merge(m, src)
}
func (m *HoldResponse) XXX_Size() int {
	return xxx_messageInfo_HoldResponse.Size(m)
}
func (m *HoldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HoldResponse proto.InternalMessageInfo

func (m *HoldResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReleaseRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseRequest) Reset()         { *m = ReleaseRequest{} }
func (m *ReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseRequest) ProtoMessage()    {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{13}
}

func (m *ReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseRequest.Unmarshal(m, b)
}
func (m *ReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseRequest.Merge(m, src)
}
func (m *ReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseRequest.Size(m)
}
func (m *ReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseRequest proto.InternalMessageInfo

func (m *ReleaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReleaseResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseResponse) Reset()         { *m = ReleaseResponse{} }
func (m *ReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseResponse) ProtoMessage()    {}
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{14}
}

func (m *ReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseResponse.Unmarshal(m, b)
}
func (m *ReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseResponse.Marshal(b, m, deterministic)
}
func (m *ReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseResponse.Merge(m, src)
}
func (m *ReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseResponse.Size(m)
}
func (m *ReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseResponse proto.InternalMessageInfo

func (m *ReleaseResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Event struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic                string               `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Labels               map[string]string    `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sequence             uint64               `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Payload              []byte               `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{15}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Event) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Event) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Event) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PublishRequest struct {
	Topic                string            `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Payload              []byte            `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{16}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PublishRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SubscribeRequest struct {
	Topic                string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Labels               map[string]string    `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SinceSequence        uint64               `protobuf:"varint,3,opt,name=since_sequence,json=sinceSequence,proto3" json:"since_sequence,omitempty"`
	SinceCreatedAt       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=since_created_at,json=sinceCreatedAt,proto3" json:"since_created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{17}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *SubscribeRequest) GetSinceSequence() uint64 {
	if m != nil {
		return m.SinceSequence
	}
	return 0
}

func (m *SubscribeRequest) GetSinceCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.SinceCreatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Job)(nil), "api.Job")
	proto.RegisterMapType((map[string]string)(nil), "api.Job.LabelsEntry")
	proto.RegisterType((*CronJob)(nil), "api.CronJob")
	proto.RegisterMapType((map[string]string)(nil), "api.CronJob.LabelsEntry")
	proto.RegisterType((*CreateJobRequest)(nil), "api.CreateJobRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.CreateJobRequest.LabelsEntry")
	proto.RegisterType((*ListenRequest)(nil), "api.ListenRequest")
	proto.RegisterType((*HeartbeatRequest)(nil), "api.HeartbeatRequest")
	proto.RegisterType((*GetRequest)(nil), "api.GetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "api.DeleteRequest")
	proto.RegisterType((*ListRequest)(nil), "api.ListRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.ListRequest.LabelsEntry")
	proto.RegisterType((*CreateCronJobRequest)(nil), "api.CreateCronJobRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.CreateCronJobRequest.LabelsEntry")
	proto.RegisterType((*AquireRequest)(nil), "api.AquireRequest")
	proto.RegisterType((*AquireResponse)(nil), "api.AquireResponse")
	proto.RegisterType((*HoldRequest)(nil), "api.HoldRequest")
	proto.RegisterType((*HoldResponse)(nil), "api.HoldResponse")
	proto.RegisterType((*ReleaseRequest)(nil), "api.ReleaseRequest")
	proto.RegisterType((*ReleaseResponse)(nil), "api.ReleaseResponse")
	proto.RegisterType((*Event)(nil), "api.Event")
	proto.RegisterMapType((map[string]string)(nil), "api.Event.LabelsEntry")
	proto.RegisterType((*PublishRequest)(nil), "api.PublishRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.PublishRequest.LabelsEntry")
	proto.RegisterType((*SubscribeRequest)(nil), "api.SubscribeRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.SubscribeRequest.LabelsEntry")
}

func init() { proto.RegisterFile("core.proto", fileDescriptor_f7e43720d1edc0fe) }

var fileDescriptor_f7e43720d1edc0fe = []byte{
	// 990 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x9e, 0x95, 0x64, 0xd9, 0x3e, 0x4e, 0x1c, 0xb3, 0xa4, 0x1d, 0xa1, 0x01, 0xe2, 0x7a, 0x1a,
	0xc6, 0x94, 0x8e, 0x6b, 0xdc, 0xce, 0x40, 0xca, 0x70, 0x11, 0xd2, 0xd2, 0x92, 0xc9, 0x05, 0xa3,
	0x72, 0x05, 0x17, 0x1e, 0x49, 0xde, 0xb4, 0x6a, 0x15, 0xad, 0xa2, 0x5d, 0x75, 0x9a, 0x47, 0x60,
	0x78, 0x06, 0xde, 0x80, 0x2b, 0x86, 0x1b, 0x2e, 0x79, 0x02, 0xde, 0x81, 0xb7, 0xe0, 0x8e, 0xd1,
	0xee, 0x4a, 0x96, 0x14, 0x39, 0x4e, 0xc6, 0xc3, 0x9d, 0xf6, 0xe4, 0x3b, 0x67, 0xbf, 0x3d, 0xdf,
	0xf9, 0x71, 0x00, 0x7c, 0x9a, 0x90, 0x49, 0x9c, 0x50, 0x4e, 0xb1, 0xee, 0xc6, 0x81, 0xbd, 0xf7,
	0x92, 0xd2, 0x97, 0x21, 0x79, 0x20, 0x4c, 0x5e, 0x7a, 0xfa, 0x80, 0x07, 0x67, 0x84, 0x71, 0xf7,
	0x2c, 0x96, 0xa8, 0xd1, 0x6f, 0x3a, 0xe8, 0xc7, 0xd4, 0xc3, 0x7d, 0xd0, 0x82, 0x85, 0x85, 0x86,
	0x68, 0xdc, 0x75, 0xb4, 0x60, 0x81, 0x77, 0xa1, 0x75, 0x9e, 0x92, 0x94, 0x58, 0x9a, 0x30, 0xc9,
	0x03, 0xc6, 0x60, 0xb0, 0x98, 0xf8, 0x96, 0x3e, 0x44, 0xe3, 0x2d, 0x47, 0x7c, 0x67, 0x48, 0xc6,
	0x5d, 0x4e, 0x2c, 0x43, 0x18, 0xe5, 0x01, 0xdf, 0x07, 0x33, 0x74, 0x3d, 0x12, 0x32, 0xab, 0x35,
	0xd4, 0xc7, 0xbd, 0xd9, 0xee, 0xc4, 0x8d, 0x83, 0xc9, 0x31, 0xf5, 0x26, 0x27, 0xc2, 0xfc, 0x34,
	0xe2, 0xc9, 0x85, 0xa3, 0x30, 0xf8, 0x00, 0xc0, 0x4f, 0x88, 0xcb, 0xc9, 0x62, 0xee, 0x72, 0xcb,
	0x1c, 0xa2, 0x71, 0x6f, 0x66, 0x4f, 0x24, 0xf7, 0x49, 0xce, 0x7d, 0xf2, 0x43, 0xce, 0xdd, 0xe9,
	0x2a, 0xf4, 0x21, 0xcf, 0x5c, 0x19, 0x77, 0x13, 0xe5, 0xda, 0x5e, 0xef, 0xaa, 0xd0, 0xd2, 0x35,
	0x8d, 0x17, 0xf9, 0xad, 0x9d, 0xf5, 0xae, 0x0a, 0x7d, 0xc8, 0xf1, 0x57, 0xd0, 0x3b, 0x0d, 0xa2,
	0x80, 0xbd, 0x92, 0xbe, 0xdd, 0xb5, 0xbe, 0x90, 0xc3, 0x0f, 0xb9, 0x7d, 0x00, 0xbd, 0x52, 0x12,
	0xf0, 0x00, 0xf4, 0x37, 0xe4, 0x42, 0xe5, 0x3e, 0xfb, 0xcc, 0x52, 0xfa, 0xd6, 0x0d, 0x97, 0xc9,
	0x17, 0x87, 0xc7, 0xda, 0x97, 0x68, 0xf4, 0xb7, 0x06, 0xed, 0xa3, 0x84, 0x46, 0x4d, 0x92, 0x61,
	0x30, 0x22, 0xf7, 0x2c, 0x77, 0x12, 0xdf, 0x4b, 0x19, 0xf5, 0x26, 0x19, 0x8d, 0x92, 0x8c, 0x18,
	0x0c, 0x3f, 0xa1, 0x91, 0xd5, 0x92, 0xde, 0xd9, 0x37, 0x9e, 0x16, 0x22, 0x9a, 0x42, 0x44, 0x4b,
	0x88, 0xa8, 0xee, 0xbf, 0x86, 0x90, 0xed, 0x9b, 0x08, 0xf9, 0x18, 0x7a, 0x11, 0x79, 0xc7, 0xe7,
	0x49, 0x1a, 0x5d, 0x53, 0x8e, 0x0c, 0xee, 0xa4, 0xd1, 0x66, 0x19, 0xfd, 0x1d, 0xc1, 0xe0, 0x48,
	0x90, 0x38, 0xa6, 0x9e, 0x43, 0xce, 0x53, 0xc2, 0xf8, 0x32, 0x6d, 0xa8, 0x29, 0x6d, 0x5a, 0x29,
	0x6d, 0x07, 0x45, 0x8a, 0x74, 0x91, 0xa2, 0x3b, 0x2a, 0x45, 0xd5, 0x80, 0x4d, 0xb9, 0xda, 0x84,
	0xf4, 0x3e, 0x6c, 0x9f, 0x04, 0x8c, 0x93, 0xe8, 0x4a, 0xc2, 0xa3, 0x9f, 0x60, 0xf0, 0x9c, 0xb8,
	0x09, 0xf7, 0x88, 0xcb, 0x73, 0xe4, 0x2d, 0x30, 0x5f, 0x53, 0x6f, 0x5e, 0x54, 0x4e, 0xeb, 0x35,
	0xf5, 0xbe, 0x5b, 0x2c, 0xbb, 0x58, 0x2b, 0x77, 0xb1, 0x0d, 0x9d, 0xbc, 0x6e, 0x45, 0x05, 0x75,
	0x9c, 0xe2, 0x3c, 0x9a, 0x02, 0x3c, 0x23, 0x45, 0xd8, 0x6b, 0x14, 0xe3, 0xe8, 0x21, 0x6c, 0x3f,
	0x21, 0x21, 0xe1, 0xe4, 0x26, 0x4e, 0x7f, 0x21, 0xe8, 0x65, 0x6f, 0xcd, 0x7d, 0x6e, 0x83, 0x29,
	0x1e, 0xc7, 0x2c, 0x34, 0xd4, 0xc7, 0x5d, 0x47, 0x9d, 0xf0, 0xa3, 0x42, 0x08, 0x4d, 0x08, 0xf1,
	0xa1, 0x10, 0xa2, 0xe4, 0xd9, 0x58, 0xaf, 0x9f, 0xc2, 0x80, 0xbc, 0xf3, 0xc3, 0x74, 0x41, 0xe6,
	0xb5, 0x87, 0xee, 0x28, 0xfb, 0xb7, 0xca, 0xbc, 0x89, 0x5c, 0xff, 0x20, 0xd8, 0x95, 0x25, 0xa1,
	0x7a, 0x67, 0x6d, 0x9d, 0x5d, 0x6a, 0xe4, 0xaf, 0x6b, 0x75, 0xb6, 0x5f, 0xaa, 0xb3, 0x6a, 0xd0,
	0xc6, 0x77, 0x5e, 0xb3, 0xe3, 0x37, 0x79, 0xe4, 0x1e, 0x6c, 0x1f, 0x9e, 0xa7, 0x41, 0xb2, 0x4a,
	0xdd, 0xd1, 0x10, 0xfa, 0x39, 0x80, 0xc5, 0x34, 0x62, 0xe4, 0x12, 0xe2, 0x23, 0xe8, 0x3d, 0xa7,
	0xe1, 0x62, 0x55, 0x80, 0x8f, 0x61, 0x4b, 0xfe, 0x79, 0x85, 0xfb, 0x10, 0xfa, 0x0e, 0x09, 0x89,
	0xcb, 0x56, 0x52, 0xb8, 0x03, 0x3b, 0x05, 0x62, 0x45, 0x90, 0x9f, 0x35, 0x68, 0x3d, 0x7d, 0x4b,
	0x22, 0xde, 0xb4, 0x12, 0x39, 0x8d, 0x03, 0x3f, 0x7f, 0xba, 0x38, 0xe0, 0x49, 0x4d, 0x98, 0xdb,
	0x42, 0x18, 0x11, 0xa1, 0x51, 0x09, 0x1b, 0x3a, 0x2c, 0x63, 0x17, 0xf9, 0x72, 0x63, 0x1a, 0x4e,
	0x71, 0xae, 0x4d, 0xcf, 0xd6, 0x4d, 0xa6, 0xa7, 0x05, 0xed, 0xd8, 0xbd, 0x08, 0xa9, 0xbb, 0x10,
	0xeb, 0x73, 0xcb, 0xc9, 0x8f, 0x9b, 0x48, 0xfa, 0x07, 0x82, 0xfe, 0xf7, 0xa9, 0x17, 0x06, 0xec,
	0x55, 0xa9, 0x62, 0x65, 0x12, 0x50, 0x39, 0x09, 0x5f, 0xd4, 0x9a, 0x6f, 0x4f, 0x24, 0xa1, 0xea,
	0xda, 0x98, 0x8d, 0xff, 0x85, 0xf6, 0x2f, 0x1a, 0x0c, 0x5e, 0xa4, 0x1e, 0xf3, 0x93, 0xc0, 0x23,
	0x57, 0x13, 0x3f, 0xa8, 0x11, 0x97, 0xe3, 0xbb, 0xee, 0xdc, 0x48, 0x7d, 0x1f, 0xfa, 0x2c, 0x88,
	0x7c, 0x32, 0x2f, 0xe4, 0xd4, 0x85, 0x9c, 0xdb, 0xc2, 0xfa, 0x22, 0xd7, 0xf4, 0x09, 0x0c, 0x24,
	0xac, 0xa4, 0xac, 0xb1, 0x56, 0x59, 0x19, 0xfa, 0x28, 0x97, 0x77, 0x83, 0x6c, 0xcc, 0xfe, 0x45,
	0x60, 0x1c, 0x53, 0x2f, 0x9b, 0x75, 0xa6, 0x0c, 0x88, 0x6f, 0x35, 0x2e, 0x29, 0xbb, 0x93, 0xff,
	0x46, 0xc3, 0x63, 0x30, 0xe5, 0x7e, 0xc1, 0xb8, 0x18, 0xa3, 0xc5, 0xb2, 0x59, 0xe2, 0xa6, 0x08,
	0xdf, 0x87, 0x6e, 0xb1, 0x62, 0x54, 0xdc, 0xfa, 0xca, 0x29, 0xc5, 0x1d, 0x82, 0xfe, 0x8c, 0x70,
	0xbc, 0x23, 0x0c, 0xcb, 0xed, 0x51, 0x42, 0x7c, 0x02, 0xa6, 0xdc, 0x11, 0xea, 0xe6, 0xca, 0xc2,
	0x28, 0xe1, 0xee, 0x82, 0x91, 0x91, 0xc2, 0x83, 0xfa, 0x98, 0x2f, 0xb3, 0x9b, 0xfd, 0x89, 0xa0,
	0xa3, 0xa6, 0x23, 0xc3, 0x9f, 0x17, 0xef, 0xff, 0x60, 0xe5, 0xf0, 0xb4, 0xb7, 0xca, 0x3f, 0x71,
	0xf0, 0xdd, 0x15, 0x7c, 0xab, 0xa8, 0x7b, 0x57, 0x72, 0xae, 0x62, 0xc7, 0x2b, 0x79, 0x57, 0x70,
	0x53, 0x34, 0xfb, 0x15, 0x41, 0xeb, 0x84, 0xfa, 0x6f, 0x04, 0x71, 0x39, 0x38, 0x55, 0xfc, 0xca,
	0x98, 0xb5, 0xdf, 0xaf, 0xd8, 0xd4, 0x54, 0xfb, 0x0c, 0x8c, 0x6c, 0x54, 0xaa, 0x6b, 0x4a, 0x43,
	0xd5, 0x7e, 0xaf, 0x64, 0x51, 0xe0, 0x47, 0xd0, 0x56, 0x53, 0x11, 0xcb, 0x60, 0xd5, 0x29, 0x6a,
	0xef, 0x56, 0x8d, 0xd2, 0x6b, 0x76, 0x0a, 0xa6, 0x98, 0x72, 0x0c, 0xdf, 0x83, 0xb6, 0x6a, 0x75,
	0xe5, 0x5f, 0x6d, 0x7c, 0x1b, 0x96, 0x23, 0x11, 0x4f, 0xa1, 0x5b, 0x74, 0x97, 0xaa, 0x97, 0x7a,
	0xb7, 0x95, 0xf1, 0x53, 0xf4, 0x4d, 0xeb, 0xc7, 0xec, 0x3f, 0x19, 0xcf, 0x14, 0x5d, 0xf2, 0xf0,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xf2, 0x6b, 0xec, 0xe3, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobsClient is the client API for Jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsClient interface {
	Create(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Jobs_ListenClient, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Job, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Job, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Job, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Jobs_ListClient, error)
}

type jobsClient struct {
	cc *grpc.ClientConn
}

func NewJobsClient(cc *grpc.ClientConn) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) Create(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.Jobs/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Jobs_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[0], "/api.Jobs/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_ListenClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobsListenClient struct {
	grpc.ClientStream
}

func (x *jobsListenClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.Jobs/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.Jobs/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.Jobs/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Jobs_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[1], "/api.Jobs/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_ListClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobsListClient struct {
	grpc.ClientStream
}

func (x *jobsListClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobsServer is the server API for Jobs service.
type JobsServer interface {
	Create(context.Context, *CreateJobRequest) (*Job, error)
	Listen(*ListenRequest, Jobs_ListenServer) error
	Heartbeat(context.Context, *HeartbeatRequest) (*Job, error)
	Get(context.Context, *GetRequest) (*Job, error)
	Delete(context.Context, *DeleteRequest) (*Job, error)
	List(*ListRequest, Jobs_ListServer) error
}

// UnimplementedJobsServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServer struct {
}

func (*UnimplementedJobsServer) Create(ctx context.Context, req *CreateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedJobsServer) Listen(req *ListenRequest, srv Jobs_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedJobsServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedJobsServer) Get(ctx context.Context, req *GetRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedJobsServer) Delete(ctx context.Context, req *DeleteRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedJobsServer) List(req *ListRequest, srv Jobs_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterJobsServer(s *grpc.Server, srv JobsServer) {
	s.RegisterService(&_Jobs_serviceDesc, srv)
}

func _Jobs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Create(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).Listen(m, &jobsListenServer{stream})
}

type Jobs_ListenServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobsListenServer struct {
	grpc.ServerStream
}

func (x *jobsListenServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Jobs/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).List(m, &jobsListServer{stream})
}

type Jobs_ListServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobsListServer struct {
	grpc.ServerStream
}

func (x *jobsListServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

var _Jobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Jobs_Create_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Jobs_Heartbeat_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Jobs_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Jobs_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Jobs_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _Jobs_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}

// CronJobsClient is the client API for CronJobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronJobsClient interface {
	Create(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CronJob, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CronJob, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*CronJob, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (CronJobs_ListClient, error)
}

type cronJobsClient struct {
	cc *grpc.ClientConn
}

func NewCronJobsClient(cc *grpc.ClientConn) CronJobsClient {
	return &cronJobsClient{cc}
}

func (c *cronJobsClient) Create(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CronJob, error) {
	out := new(CronJob)
	err := c.cc.Invoke(ctx, "/api.CronJobs/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CronJob, error) {
	out := new(CronJob)
	err := c.cc.Invoke(ctx, "/api.CronJobs/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*CronJob, error) {
	out := new(CronJob)
	err := c.cc.Invoke(ctx, "/api.CronJobs/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (CronJobs_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CronJobs_serviceDesc.Streams[0], "/api.CronJobs/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &cronJobsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CronJobs_ListClient interface {
	Recv() (*CronJob, error)
	grpc.ClientStream
}

type cronJobsListClient struct {
	grpc.ClientStream
}

func (x *cronJobsListClient) Recv() (*CronJob, error) {
	m := new(CronJob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CronJobsServer is the server API for CronJobs service.
type CronJobsServer interface {
	Create(context.Context, *CreateCronJobRequest) (*CronJob, error)
	Get(context.Context, *GetRequest) (*CronJob, error)
	Delete(context.Context, *DeleteRequest) (*CronJob, error)
	List(*ListRequest, CronJobs_ListServer) error
}

// UnimplementedCronJobsServer can be embedded to have forward compatible implementations.
type UnimplementedCronJobsServer struct {
}

func (*UnimplementedCronJobsServer) Create(ctx context.Context, req *CreateCronJobRequest) (*CronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCronJobsServer) Get(ctx context.Context, req *GetRequest) (*CronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCronJobsServer) Delete(ctx context.Context, req *DeleteRequest) (*CronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCronJobsServer) List(req *ListRequest, srv CronJobs_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterCronJobsServer(s *grpc.Server, srv CronJobsServer) {
	s.RegisterService(&_CronJobs_serviceDesc, srv)
}

func _CronJobs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronJobs/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobsServer).Create(ctx, req.(*CreateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJobs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronJobs/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJobs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronJobs/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJobs_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CronJobsServer).List(m, &cronJobsListServer{stream})
}

type CronJobs_ListServer interface {
	Send(*CronJob) error
	grpc.ServerStream
}

type cronJobsListServer struct {
	grpc.ServerStream
}

func (x *cronJobsListServer) Send(m *CronJob) error {
	return x.ServerStream.SendMsg(m)
}

var _CronJobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CronJobs",
	HandlerType: (*CronJobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CronJobs_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CronJobs_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CronJobs_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CronJobs_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}

// LocksClient is the client API for Locks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocksClient interface {
	Aquire(ctx context.Context, in *AquireRequest, opts ...grpc.CallOption) (*AquireResponse, error)
	Hold(ctx context.Context, in *HoldRequest, opts ...grpc.CallOption) (*HoldResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
}

type locksClient struct {
	cc *grpc.ClientConn
}

func NewLocksClient(cc *grpc.ClientConn) LocksClient {
	return &locksClient{cc}
}

func (c *locksClient) Aquire(ctx context.Context, in *AquireRequest, opts ...grpc.CallOption) (*AquireResponse, error) {
	out := new(AquireResponse)
	err := c.cc.Invoke(ctx, "/api.Locks/Aquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksClient) Hold(ctx context.Context, in *HoldRequest, opts ...grpc.CallOption) (*HoldResponse, error) {
	out := new(HoldResponse)
	err := c.cc.Invoke(ctx, "/api.Locks/Hold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, "/api.Locks/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocksServer is the server API for Locks service.
type LocksServer interface {
	Aquire(context.Context, *AquireRequest) (*AquireResponse, error)
	Hold(context.Context, *HoldRequest) (*HoldResponse, error)
	Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
}

// UnimplementedLocksServer can be embedded to have forward compatible implementations.
type UnimplementedLocksServer struct {
}

func (*UnimplementedLocksServer) Aquire(ctx context.Context, req *AquireRequest) (*AquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aquire not implemented")
}
func (*UnimplementedLocksServer) Hold(ctx context.Context, req *HoldRequest) (*HoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hold not implemented")
}
func (*UnimplementedLocksServer) Release(ctx context.Context, req *ReleaseRequest) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

func RegisterLocksServer(s *grpc.Server, srv LocksServer) {
	s.RegisterService(&_Locks_serviceDesc, srv)
}

func _Locks_Aquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServer).Aquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Locks/Aquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServer).Aquire(ctx, req.(*AquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locks_Hold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServer).Hold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Locks/Hold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServer).Hold(ctx, req.(*HoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locks_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Locks/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Locks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Locks",
	HandlerType: (*LocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aquire",
			Handler:    _Locks_Aquire_Handler,
		},
		{
			MethodName: "Hold",
			Handler:    _Locks_Hold_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Locks_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Event, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Events_SubscribeClient, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/api.Events/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Events_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Events_serviceDesc.Streams[0], "/api.Events/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Events_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventsSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventsSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServer is the server API for Events service.
type EventsServer interface {
	Publish(context.Context, *PublishRequest) (*Event, error)
	Subscribe(*SubscribeRequest, Events_SubscribeServer) error
}

// UnimplementedEventsServer can be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (*UnimplementedEventsServer) Publish(ctx context.Context, req *PublishRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedEventsServer) Subscribe(req *SubscribeRequest, srv Events_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Events/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).Subscribe(m, &eventsSubscribeServer{stream})
}

type Events_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventsSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventsSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Events_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Events_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}
